
# test___init__.py - Generated by CodiumAI

import unittest

"""
Code Analysis:
- This function takes an event data dictionary as an argument.
- It extracts the file name from the URL in the event data dictionary.
- It then uses the connection string stored in the environment variables to connect to the blob storage.
- It creates a BlobClient object with the container name and blob name.
- It downloads the blob from the blob storage.
- It loads the data from the blob into a JSON string.
- It then converts the JSON string into a dictionary.
- Finally, it returns the data dictionary.
"""


"""
Test Strategies:
- test_fetch_data_from_blob_storage(): tests that the function is able to fetch data from the blob storage
- test_file_name_extraction(): tests that the function is able to extract the file name from the URL in the event data dictionary
- test_connection_string(): tests that the function is able to connect to the blob storage using the connection string stored in the environment variables
- test_blob_client_creation(): tests that the function is able to create a BlobClient object with the container name and blob name
- test_data_download(): tests that the function is able to download the blob from the blob storage
- test_data_load(): tests that the function is able to load the data from the blob into a JSON string
- test_data_conversion(): tests that the function is able to convert the JSON string into a dictionary
- test_data_return(): tests that the function is able to return the data dictionary
"""
from from_blob_to_cosmos_db import fetch_data_from_blob_storage
from azure.storage.blob import BlobClient
from azure.cosmos import CosmosClient
import os
import json
import unittest



class TestFetchDataFromBlobStorage(unittest.TestCase):
    def test_fetch_data_from_blob_storage(self):
        event_data = {'url': 'https://medics.blob.core.windows.net/medics/test.json'}
        data_dict = fetch_data_from_blob_storage(event_data)
        self.assertIsNotNone(data_dict)

    def test_file_name_extraction(self):
        event_data = {'url': 'https://medics.blob.core.windows.net/medics/test.json'}
        file_name = event_data['url'].split('/')[4]
        self.assertEqual(file_name, 'test.json')

    def test_connection_string(self):
        connection_string = os.environ['AZURE_STORAGE_ACCOUNT_CONNECTION_STR']
        self.assertIsNotNone(connection_string)

    def test_blob_client_creation(self):
        connection_string = os.environ['AZURE_STORAGE_ACCOUNT_CONNECTION_STR']
        blob = BlobClient.from_connection_string(conn_str=connection_string, container_name='medics', blob_name='test.json')
        self.assertIsNotNone(blob)

    def test_data_download(self):
        connection_string = os.environ['AZURE_STORAGE_ACCOUNT_CONNECTION_STR']
        blob = BlobClient.from_connection_string(conn_str=connection_string, container_name='medics', blob_name='test.json')
        data = blob.download_blob()
        self.assertIsNotNone(data)

    def test_data_load(self):
        connection_string = os.environ['AZURE_STORAGE_ACCOUNT_CONNECTION_STR']
        blob = BlobClient.from_connection_string(conn_str=connection_string, container_name='medics', blob_name='test.json')
        data = blob.download_blob()
        data_json = json.load(data)
        self.assertIsNotNone(data_json)

    def test_data_conversion(self):
        connection_string = os.environ['AZURE_STORAGE_ACCOUNT_CONNECTION_STR']
        blob = BlobClient.from_connection_string(conn_str=connection_string, container_name='medics', blob_name='test.json')
        data = blob.download_blob()
        data_json = json.load(data)
        data_dict = json.loads(data)
        self.assertIsNotNone(data_dict)

    def test_data_return(self):
        event_data = {'url': 'https://medics.blob.core.windows.net/medics/test.json'}
        data = fetch_data_from_blob_storage(event_data)
        self.assertIsNotNone(data)
